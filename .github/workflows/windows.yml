name: Github_CI

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build_type: ["Debug", "Release"]
        os: ["windows-2025"]
        static: ["true", "false"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup environment
      shell: bash
      run: env

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          C:/opt/vcpkg/installed
        key: vcpkg-${{ runner.os }}-${{ matrix.static }}-${{ hashFiles('**/vcpkg.json') }}

    - name: Clone and bootstrap vcpkg
      run: |
        if not exist "C:\opt" mkdir "C:\opt"
        if not exist "C:\opt\vcpkg" (
          cd "C:\opt"
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
        )
        echo "VCPKG_ROOT=C:\opt\vcpkg" >> %GITHUB_ENV%
      shell: cmd

    - name: Install dependencies via vcpkg
      run: |
        if "${{ matrix.static }}" == "true" (
          C:\opt\vcpkg\vcpkg.exe install boost:x64-windows-static openssl:x64-windows-static
        ) else (
          C:\opt\vcpkg\vcpkg.exe install boost:x64-windows openssl:x64-windows
        )
      shell: cmd

    - name: Configure CMake
      run: |
        if [ "${{ matrix.static }}" == "true" ]; then
          cmake --preset vcpkg-static
        else
          cmake --preset vcpkg-dynamic
        fi
      shell: bash

    - name: Build and install
      run: |
        if [ "${{ matrix.static }}" == "true" ]; then
          cmake --build build --config ${{ matrix.build_type }}
        else
          cmake --build build-dynamic --config ${{ matrix.build_type }}
        fi
      shell: bash

    - name: Run tests
      run: |
        if [ "${{ matrix.static }}" == "true" ]; then
          cd build
        else
          cd build-dynamic
        fi
        ctest -C ${{ matrix.build_type }} --output-on-failure
      shell: bash
      env:
        CTEST_OUTPUT_ON_FAILURE: 1

    - name: Inspector
      run: C:/licensecc/bin/test/lccinspector.exe
      shell: bash

    - name: On Failure print logs
      if: ${{ failure() }}
      shell: pwsh
      run: |
        $logPath = "$env:TEMP\open-license.log"
        if (Test-Path $logPath) {
          Get-Content $logPath
        } else {
          Write-Host "Log file not found: $logPath"
        }
